{
    "sourceFile": "src/components/AreaChart/AreaChart.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1692908805164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1692908892811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,11 +116,14 @@\n     }\r\n   }, [svgRef, createAreaGraph]);\r\n \r\n   return (\r\n-    <div>\r\n-      <svg ref={svgRef} />\r\n-    </div>\r\n+    <>\r\n+      <AreaChart />\r\n+      <div>\r\n+        <svg ref={svgRef} />\r\n+      </div>\r\n+    </>\r\n   );\r\n };\r\n \r\n export default AreaChart;\r\n"
                },
                {
                    "date": 1692908902601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import React, { useRef, useEffect, useCallback, useState } from \"react\";\r\n import * as d3 from \"d3\";\r\n+import AreaChartPanel from \"./AreaChartPanel\";\r\n \r\n \r\n const AreaChart = ({\r\n   data,\r\n@@ -117,9 +118,9 @@\n   }, [svgRef, createAreaGraph]);\r\n \r\n   return (\r\n     <>\r\n-      <AreaChart />\r\n+      <AreaChartPanel />\r\n       <div>\r\n         <svg ref={svgRef} />\r\n       </div>\r\n     </>\r\n"
                },
                {
                    "date": 1692908937862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,14 +117,14 @@\n     }\r\n   }, [svgRef, createAreaGraph]);\r\n \r\n   return (\r\n-    <>\r\n+    <div className=\"wrapper\">\r\n       <AreaChartPanel />\r\n       <div>\r\n         <svg ref={svgRef} />\r\n       </div>\r\n-    </>\r\n+    </div>\r\n   );\r\n };\r\n \r\n export default AreaChart;\r\n"
                },
                {
                    "date": 1692909098862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,130 @@\n+import React, { useRef, useEffect, useCallback, useState } from \"react\";\r\n+import * as d3 from \"d3\";\r\n+import AreaChartPanel from \"./AreaChartPanel\";\r\n+\r\n+\r\n+const AreaChart = ({\r\n+  data,\r\n+  width = 400,\r\n+  height = 400,\r\n+  margin = { left: 100, bottom: 100, top: 50, right: 50 },\r\n+  xAxis = \"date\",\r\n+  yAxis = \"value\"\r\n+  // tooltip={show: true, text: '<div>Portfolio Value: $%value%</div>'}\r\n+}) => {\r\n+  const svgRef = useRef(null);\r\n+  const [copyData, setCopyData] = useState([]);\r\n+\r\n+  useEffect(() => {\r\n+    const parseTime = d3.timeParse(\"%Y\");\r\n+    const newFormattedData = data.map((obj) => {\r\n+      return { date: parseTime(obj.data), value: obj.value };\r\n+    });\r\n+    setCopyData([...newFormattedData]);\r\n+  }, []);\r\n+\r\n+  const drawSvg = useCallback(\r\n+    (div) => {\r\n+      const svg = d3\r\n+        .select(div)\r\n+        .attr(\"width\", width + margin.left + margin.right)\r\n+        .attr(\"height\", height + margin.top + margin.bottom)\r\n+        .append(\"g\")\r\n+        .attr(\"transform\", `translate(${margin.left},${margin.right})`);\r\n+      return svg;\r\n+    },\r\n+    [height, width, margin]\r\n+  );\r\n+\r\n+  const handleAxis = useCallback(() => {\r\n+    let x, y;\r\n+    // const domainMax = (axis) => Math.max.apply(Math, data.map(function(o) { return o[axis]; }))\r\n+    // const scaleDomain = domain.length > 0 ? domain : createDomain(data, xAxis);\r\n+    const reformatDates = copyData.map((obj) => obj[xAxis]);\r\n+    x = d3\r\n+      .scaleTime()\r\n+      .domain(d3.extent(reformatDates))\r\n+      .range([0, width])\r\n+      .nice();\r\n+\r\n+    y = d3\r\n+      .scaleLinear()\r\n+      .domain([0, d3.max(copyData, (d) => +d[yAxis])])\r\n+      .range([height, 0]);\r\n+    return [x, y];\r\n+  }, [width, height, copyData, xAxis, yAxis]);\r\n+\r\n+  const createAreaGraph = useCallback(\r\n+    (div) => {\r\n+      const svg = drawSvg(div);\r\n+      const [x, y] = handleAxis();\r\n+\r\n+      svg\r\n+        .append(\"g\")\r\n+        .attr(\"transform\", `translate(0,${height})`)\r\n+        .call(d3.axisBottom(x).ticks(d3.timeYear));\r\n+      svg.append(\"g\").call(d3.axisLeft(y));\r\n+      // svg.append('line').classed('hoverLine', true)\r\n+      // svg.append('circle').classed('hoverPoint', true);\r\n+      svg.append(\"text\").classed(\"hoverText\", true);\r\n+\r\n+      // Add the area\r\n+      svg\r\n+        .append(\"path\")\r\n+        .datum(copyData)\r\n+        .attr(\"fill\", \"#cce5df\")\r\n+        .attr(\"stroke\", \"#69b3a2\")\r\n+        .attr(\"stroke-width\", 1.5)\r\n+        .attr(\r\n+          \"d\",\r\n+          d3\r\n+            .area()\r\n+            .x((d) => x(d[xAxis]))\r\n+            .y0(y(0))\r\n+            .y1((d) => y(d[yAxis]))\r\n+        );\r\n+\r\n+      svg\r\n+        .append(\"path\")\r\n+        .datum(copyData)\r\n+        .attr(\"fill\", \"none\")\r\n+        .attr(\"stroke\", \"#69b3a2\")\r\n+        .attr(\"stroke-width\", 2)\r\n+        .attr(\r\n+          \"d\",\r\n+          d3\r\n+            .line()\r\n+            .x((d) => x(d[xAxis]))\r\n+            .y((d) => y(d[yAxis]))\r\n+        );\r\n+\r\n+      svg\r\n+        .selectAll(\"myCircles\")\r\n+        .data(copyData)\r\n+        .join(\"circle\")\r\n+        .attr(\"fill\", \"yellow\")\r\n+        .attr(\"stroke\", \"none\")\r\n+        .attr(\"cx\", (d) => x(d[xAxis]))\r\n+        .attr(\"cy\", (d) => y(d[yAxis]))\r\n+        .attr(\"r\", 3);\r\n+    },\r\n+    [handleAxis, height, drawSvg, copyData, xAxis, yAxis]\r\n+  );\r\n+\r\n+  useEffect(() => {\r\n+    if (svgRef.current) {\r\n+      createAreaGraph(svgRef.current);\r\n+    }\r\n+  }, [svgRef, createAreaGraph]);\r\n+\r\n+  return (\r\n+    <div className=\"wrapper\">\r\n+      <AreaChartPanel />\r\n+      <div className=\"area-chart-right\">\r\n+        <svg ref={svgRef} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AreaChart;\r\n"
                },
                {
                    "date": 1692909117492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,130 @@\n+import React, { useRef, useEffect, useCallback, useState } from \"react\";\r\n+import * as d3 from \"d3\";\r\n+import AreaChartPanel from \"./AreaChartPanel\";\r\n+\r\n+\r\n+const AreaChart = ({\r\n+  data,\r\n+  width = 400,\r\n+  height = 400,\r\n+  margin = { left: 100, bottom: 100, top: 50, right: 50 },\r\n+  xAxis = \"date\",\r\n+  yAxis = \"value\"\r\n+  // tooltip={show: true, text: '<div>Portfolio Value: $%value%</div>'}\r\n+}) => {\r\n+  const svgRef = useRef(null);\r\n+  const [copyData, setCopyData] = useState([]);\r\n+\r\n+  useEffect(() => {\r\n+    const parseTime = d3.timeParse(\"%Y\");\r\n+    const newFormattedData = data.map((obj) => {\r\n+      return { date: parseTime(obj.data), value: obj.value };\r\n+    });\r\n+    setCopyData([...newFormattedData]);\r\n+  }, []);\r\n+\r\n+  const drawSvg = useCallback(\r\n+    (div) => {\r\n+      const svg = d3\r\n+        .select(div)\r\n+        .attr(\"width\", width + margin.left + margin.right)\r\n+        .attr(\"height\", height + margin.top + margin.bottom)\r\n+        .append(\"g\")\r\n+        .attr(\"transform\", `translate(${margin.left},${margin.right})`);\r\n+      return svg;\r\n+    },\r\n+    [height, width, margin]\r\n+  );\r\n+\r\n+  const handleAxis = useCallback(() => {\r\n+    let x, y;\r\n+    // const domainMax = (axis) => Math.max.apply(Math, data.map(function(o) { return o[axis]; }))\r\n+    // const scaleDomain = domain.length > 0 ? domain : createDomain(data, xAxis);\r\n+    const reformatDates = copyData.map((obj) => obj[xAxis]);\r\n+    x = d3\r\n+      .scaleTime()\r\n+      .domain(d3.extent(reformatDates))\r\n+      .range([0, width])\r\n+      .nice();\r\n+\r\n+    y = d3\r\n+      .scaleLinear()\r\n+      .domain([0, d3.max(copyData, (d) => +d[yAxis])])\r\n+      .range([height, 0]);\r\n+    return [x, y];\r\n+  }, [width, height, copyData, xAxis, yAxis]);\r\n+\r\n+  const createAreaGraph = useCallback(\r\n+    (div) => {\r\n+      const svg = drawSvg(div);\r\n+      const [x, y] = handleAxis();\r\n+\r\n+      svg\r\n+        .append(\"g\")\r\n+        .attr(\"transform\", `translate(0,${height})`)\r\n+        .call(d3.axisBottom(x).ticks(d3.timeYear));\r\n+      svg.append(\"g\").call(d3.axisLeft(y));\r\n+      // svg.append('line').classed('hoverLine', true)\r\n+      // svg.append('circle').classed('hoverPoint', true);\r\n+      svg.append(\"text\").classed(\"hoverText\", true);\r\n+\r\n+      // Add the area\r\n+      svg\r\n+        .append(\"path\")\r\n+        .datum(copyData)\r\n+        .attr(\"fill\", \"#cce5df\")\r\n+        .attr(\"stroke\", \"#69b3a2\")\r\n+        .attr(\"stroke-width\", 1.5)\r\n+        .attr(\r\n+          \"d\",\r\n+          d3\r\n+            .area()\r\n+            .x((d) => x(d[xAxis]))\r\n+            .y0(y(0))\r\n+            .y1((d) => y(d[yAxis]))\r\n+        );\r\n+\r\n+      svg\r\n+        .append(\"path\")\r\n+        .datum(copyData)\r\n+        .attr(\"fill\", \"none\")\r\n+        .attr(\"stroke\", \"#69b3a2\")\r\n+        .attr(\"stroke-width\", 2)\r\n+        .attr(\r\n+          \"d\",\r\n+          d3\r\n+            .line()\r\n+            .x((d) => x(d[xAxis]))\r\n+            .y((d) => y(d[yAxis]))\r\n+        );\r\n+\r\n+      svg\r\n+        .selectAll(\"myCircles\")\r\n+        .data(copyData)\r\n+        .join(\"circle\")\r\n+        .attr(\"fill\", \"yellow\")\r\n+        .attr(\"stroke\", \"none\")\r\n+        .attr(\"cx\", (d) => x(d[xAxis]))\r\n+        .attr(\"cy\", (d) => y(d[yAxis]))\r\n+        .attr(\"r\", 3);\r\n+    },\r\n+    [handleAxis, height, drawSvg, copyData, xAxis, yAxis]\r\n+  );\r\n+\r\n+  useEffect(() => {\r\n+    if (svgRef.current) {\r\n+      createAreaGraph(svgRef.current);\r\n+    }\r\n+  }, [svgRef, createAreaGraph]);\r\n+\r\n+  return (\r\n+    <div className=\"area-chart-wrapper\">\r\n+      <AreaChartPanel />\r\n+      <div className=\"area-chart-right\">\r\n+        <svg ref={svgRef} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AreaChart;\r\n"
                },
                {
                    "date": 1692909146459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,130 @@\n+import React, { useRef, useEffect, useCallback, useState } from \"react\";\r\n+import * as d3 from \"d3\";\r\n+import AreaChartPanel from \"./AreaChartPanel\";\r\n+\r\n+\r\n+const AreaChart = ({\r\n+  data,\r\n+  width = 400,\r\n+  height = 400,\r\n+  margin = { left: 100, bottom: 100, top: 50, right: 50 },\r\n+  xAxis = \"date\",\r\n+  yAxis = \"value\"\r\n+  // tooltip={show: true, text: '<div>Portfolio Value: $%value%</div>'}\r\n+}) => {\r\n+  const svgRef = useRef(null);\r\n+  const [copyData, setCopyData] = useState([]);\r\n+\r\n+  useEffect(() => {\r\n+    const parseTime = d3.timeParse(\"%Y\");\r\n+    const newFormattedData = data.map((obj) => {\r\n+      return { date: parseTime(obj.data), value: obj.value };\r\n+    });\r\n+    setCopyData([...newFormattedData]);\r\n+  }, []);\r\n+\r\n+  const drawSvg = useCallback(\r\n+    (div) => {\r\n+      const svg = d3\r\n+        .select(div)\r\n+        .attr(\"width\", width + margin.left + margin.right)\r\n+        .attr(\"height\", height + margin.top + margin.bottom)\r\n+        .append(\"g\")\r\n+        .attr(\"transform\", `translate(${margin.left},${margin.right})`);\r\n+      return svg;\r\n+    },\r\n+    [height, width, margin]\r\n+  );\r\n+\r\n+  const handleAxis = useCallback(() => {\r\n+    let x, y;\r\n+    // const domainMax = (axis) => Math.max.apply(Math, data.map(function(o) { return o[axis]; }))\r\n+    // const scaleDomain = domain.length > 0 ? domain : createDomain(data, xAxis);\r\n+    const reformatDates = copyData.map((obj) => obj[xAxis]);\r\n+    x = d3\r\n+      .scaleTime()\r\n+      .domain(d3.extent(reformatDates))\r\n+      .range([0, width])\r\n+      .nice();\r\n+\r\n+    y = d3\r\n+      .scaleLinear()\r\n+      .domain([0, d3.max(copyData, (d) => +d[yAxis])])\r\n+      .range([height, 0]);\r\n+    return [x, y];\r\n+  }, [width, height, copyData, xAxis, yAxis]);\r\n+\r\n+  const createAreaGraph = useCallback(\r\n+    (div) => {\r\n+      const svg = drawSvg(div);\r\n+      const [x, y] = handleAxis();\r\n+\r\n+      svg\r\n+        .append(\"g\")\r\n+        .attr(\"transform\", `translate(0,${height})`)\r\n+        .call(d3.axisBottom(x).ticks(d3.timeYear));\r\n+      svg.append(\"g\").call(d3.axisLeft(y));\r\n+      // svg.append('line').classed('hoverLine', true)\r\n+      // svg.append('circle').classed('hoverPoint', true);\r\n+      svg.append(\"text\").classed(\"hoverText\", true);\r\n+\r\n+      // Add the area\r\n+      svg\r\n+        .append(\"path\")\r\n+        .datum(copyData)\r\n+        .attr(\"fill\", \"#cce5df\")\r\n+        .attr(\"stroke\", \"#69b3a2\")\r\n+        .attr(\"stroke-width\", 1.5)\r\n+        .attr(\r\n+          \"d\",\r\n+          d3\r\n+            .area()\r\n+            .x((d) => x(d[xAxis]))\r\n+            .y0(y(0))\r\n+            .y1((d) => y(d[yAxis]))\r\n+        );\r\n+\r\n+      svg\r\n+        .append(\"path\")\r\n+        .datum(copyData)\r\n+        .attr(\"fill\", \"none\")\r\n+        .attr(\"stroke\", \"#69b3a2\")\r\n+        .attr(\"stroke-width\", 2)\r\n+        .attr(\r\n+          \"d\",\r\n+          d3\r\n+            .line()\r\n+            .x((d) => x(d[xAxis]))\r\n+            .y((d) => y(d[yAxis]))\r\n+        );\r\n+\r\n+      svg\r\n+        .selectAll(\"myCircles\")\r\n+        .data(copyData)\r\n+        .join(\"circle\")\r\n+        .attr(\"fill\", \"yellow\")\r\n+        .attr(\"stroke\", \"none\")\r\n+        .attr(\"cx\", (d) => x(d[xAxis]))\r\n+        .attr(\"cy\", (d) => y(d[yAxis]))\r\n+        .attr(\"r\", 3);\r\n+    },\r\n+    [handleAxis, height, drawSvg, copyData, xAxis, yAxis]\r\n+  );\r\n+\r\n+  useEffect(() => {\r\n+    if (svgRef.current) {\r\n+      createAreaGraph(svgRef.current);\r\n+    }\r\n+  }, [svgRef, createAreaGraph]);\r\n+\r\n+  return (\r\n+    <div className=\"area-chart-wrapper\">\r\n+      <AreaChartPanel />\r\n+      <div className=\"area-chart-right\">\r\n+        <svg ref={svgRef} />\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default AreaChart;\r\n"
                },
                {
                    "date": 1692909156516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,394 +127,4 @@\n   );\r\n };\r\n \r\n export default AreaChart;\r\n-import React, { useRef, useEffect, useCallback, useState } from \"react\";\r\n-import * as d3 from \"d3\";\r\n-import AreaChartPanel from \"./AreaChartPanel\";\r\n-\r\n-\r\n-const AreaChart = ({\r\n-  data,\r\n-  width = 400,\r\n-  height = 400,\r\n-  margin = { left: 100, bottom: 100, top: 50, right: 50 },\r\n-  xAxis = \"date\",\r\n-  yAxis = \"value\"\r\n-  // tooltip={show: true, text: '<div>Portfolio Value: $%value%</div>'}\r\n-}) => {\r\n-  const svgRef = useRef(null);\r\n-  const [copyData, setCopyData] = useState([]);\r\n-\r\n-  useEffect(() => {\r\n-    const parseTime = d3.timeParse(\"%Y\");\r\n-    const newFormattedData = data.map((obj) => {\r\n-      return { date: parseTime(obj.data), value: obj.value };\r\n-    });\r\n-    setCopyData([...newFormattedData]);\r\n-  }, []);\r\n-\r\n-  const drawSvg = useCallback(\r\n-    (div) => {\r\n-      const svg = d3\r\n-        .select(div)\r\n-        .attr(\"width\", width + margin.left + margin.right)\r\n-        .attr(\"height\", height + margin.top + margin.bottom)\r\n-        .append(\"g\")\r\n-        .attr(\"transform\", `translate(${margin.left},${margin.right})`);\r\n-      return svg;\r\n-    },\r\n-    [height, width, margin]\r\n-  );\r\n-\r\n-  const handleAxis = useCallback(() => {\r\n-    let x, y;\r\n-    // const domainMax = (axis) => Math.max.apply(Math, data.map(function(o) { return o[axis]; }))\r\n-    // const scaleDomain = domain.length > 0 ? domain : createDomain(data, xAxis);\r\n-    const reformatDates = copyData.map((obj) => obj[xAxis]);\r\n-    x = d3\r\n-      .scaleTime()\r\n-      .domain(d3.extent(reformatDates))\r\n-      .range([0, width])\r\n-      .nice();\r\n-\r\n-    y = d3\r\n-      .scaleLinear()\r\n-      .domain([0, d3.max(copyData, (d) => +d[yAxis])])\r\n-      .range([height, 0]);\r\n-    return [x, y];\r\n-  }, [width, height, copyData, xAxis, yAxis]);\r\n-\r\n-  const createAreaGraph = useCallback(\r\n-    (div) => {\r\n-      const svg = drawSvg(div);\r\n-      const [x, y] = handleAxis();\r\n-\r\n-      svg\r\n-        .append(\"g\")\r\n-        .attr(\"transform\", `translate(0,${height})`)\r\n-        .call(d3.axisBottom(x).ticks(d3.timeYear));\r\n-      svg.append(\"g\").call(d3.axisLeft(y));\r\n-      // svg.append('line').classed('hoverLine', true)\r\n-      // svg.append('circle').classed('hoverPoint', true);\r\n-      svg.append(\"text\").classed(\"hoverText\", true);\r\n-\r\n-      // Add the area\r\n-      svg\r\n-        .append(\"path\")\r\n-        .datum(copyData)\r\n-        .attr(\"fill\", \"#cce5df\")\r\n-        .attr(\"stroke\", \"#69b3a2\")\r\n-        .attr(\"stroke-width\", 1.5)\r\n-        .attr(\r\n-          \"d\",\r\n-          d3\r\n-            .area()\r\n-            .x((d) => x(d[xAxis]))\r\n-            .y0(y(0))\r\n-            .y1((d) => y(d[yAxis]))\r\n-        );\r\n-\r\n-      svg\r\n-        .append(\"path\")\r\n-        .datum(copyData)\r\n-        .attr(\"fill\", \"none\")\r\n-        .attr(\"stroke\", \"#69b3a2\")\r\n-        .attr(\"stroke-width\", 2)\r\n-        .attr(\r\n-          \"d\",\r\n-          d3\r\n-            .line()\r\n-            .x((d) => x(d[xAxis]))\r\n-            .y((d) => y(d[yAxis]))\r\n-        );\r\n-\r\n-      svg\r\n-        .selectAll(\"myCircles\")\r\n-        .data(copyData)\r\n-        .join(\"circle\")\r\n-        .attr(\"fill\", \"yellow\")\r\n-        .attr(\"stroke\", \"none\")\r\n-        .attr(\"cx\", (d) => x(d[xAxis]))\r\n-        .attr(\"cy\", (d) => y(d[yAxis]))\r\n-        .attr(\"r\", 3);\r\n-    },\r\n-    [handleAxis, height, drawSvg, copyData, xAxis, yAxis]\r\n-  );\r\n-\r\n-  useEffect(() => {\r\n-    if (svgRef.current) {\r\n-      createAreaGraph(svgRef.current);\r\n-    }\r\n-  }, [svgRef, createAreaGraph]);\r\n-\r\n-  return (\r\n-    <div className=\"area-chart-wrapper\">\r\n-      <AreaChartPanel />\r\n-      <div className=\"area-chart-right\">\r\n-        <svg ref={svgRef} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AreaChart;\r\n-import React, { useRef, useEffect, useCallback, useState } from \"react\";\r\n-import * as d3 from \"d3\";\r\n-import AreaChartPanel from \"./AreaChartPanel\";\r\n-\r\n-\r\n-const AreaChart = ({\r\n-  data,\r\n-  width = 400,\r\n-  height = 400,\r\n-  margin = { left: 100, bottom: 100, top: 50, right: 50 },\r\n-  xAxis = \"date\",\r\n-  yAxis = \"value\"\r\n-  // tooltip={show: true, text: '<div>Portfolio Value: $%value%</div>'}\r\n-}) => {\r\n-  const svgRef = useRef(null);\r\n-  const [copyData, setCopyData] = useState([]);\r\n-\r\n-  useEffect(() => {\r\n-    const parseTime = d3.timeParse(\"%Y\");\r\n-    const newFormattedData = data.map((obj) => {\r\n-      return { date: parseTime(obj.data), value: obj.value };\r\n-    });\r\n-    setCopyData([...newFormattedData]);\r\n-  }, []);\r\n-\r\n-  const drawSvg = useCallback(\r\n-    (div) => {\r\n-      const svg = d3\r\n-        .select(div)\r\n-        .attr(\"width\", width + margin.left + margin.right)\r\n-        .attr(\"height\", height + margin.top + margin.bottom)\r\n-        .append(\"g\")\r\n-        .attr(\"transform\", `translate(${margin.left},${margin.right})`);\r\n-      return svg;\r\n-    },\r\n-    [height, width, margin]\r\n-  );\r\n-\r\n-  const handleAxis = useCallback(() => {\r\n-    let x, y;\r\n-    // const domainMax = (axis) => Math.max.apply(Math, data.map(function(o) { return o[axis]; }))\r\n-    // const scaleDomain = domain.length > 0 ? domain : createDomain(data, xAxis);\r\n-    const reformatDates = copyData.map((obj) => obj[xAxis]);\r\n-    x = d3\r\n-      .scaleTime()\r\n-      .domain(d3.extent(reformatDates))\r\n-      .range([0, width])\r\n-      .nice();\r\n-\r\n-    y = d3\r\n-      .scaleLinear()\r\n-      .domain([0, d3.max(copyData, (d) => +d[yAxis])])\r\n-      .range([height, 0]);\r\n-    return [x, y];\r\n-  }, [width, height, copyData, xAxis, yAxis]);\r\n-\r\n-  const createAreaGraph = useCallback(\r\n-    (div) => {\r\n-      const svg = drawSvg(div);\r\n-      const [x, y] = handleAxis();\r\n-\r\n-      svg\r\n-        .append(\"g\")\r\n-        .attr(\"transform\", `translate(0,${height})`)\r\n-        .call(d3.axisBottom(x).ticks(d3.timeYear));\r\n-      svg.append(\"g\").call(d3.axisLeft(y));\r\n-      // svg.append('line').classed('hoverLine', true)\r\n-      // svg.append('circle').classed('hoverPoint', true);\r\n-      svg.append(\"text\").classed(\"hoverText\", true);\r\n-\r\n-      // Add the area\r\n-      svg\r\n-        .append(\"path\")\r\n-        .datum(copyData)\r\n-        .attr(\"fill\", \"#cce5df\")\r\n-        .attr(\"stroke\", \"#69b3a2\")\r\n-        .attr(\"stroke-width\", 1.5)\r\n-        .attr(\r\n-          \"d\",\r\n-          d3\r\n-            .area()\r\n-            .x((d) => x(d[xAxis]))\r\n-            .y0(y(0))\r\n-            .y1((d) => y(d[yAxis]))\r\n-        );\r\n-\r\n-      svg\r\n-        .append(\"path\")\r\n-        .datum(copyData)\r\n-        .attr(\"fill\", \"none\")\r\n-        .attr(\"stroke\", \"#69b3a2\")\r\n-        .attr(\"stroke-width\", 2)\r\n-        .attr(\r\n-          \"d\",\r\n-          d3\r\n-            .line()\r\n-            .x((d) => x(d[xAxis]))\r\n-            .y((d) => y(d[yAxis]))\r\n-        );\r\n-\r\n-      svg\r\n-        .selectAll(\"myCircles\")\r\n-        .data(copyData)\r\n-        .join(\"circle\")\r\n-        .attr(\"fill\", \"yellow\")\r\n-        .attr(\"stroke\", \"none\")\r\n-        .attr(\"cx\", (d) => x(d[xAxis]))\r\n-        .attr(\"cy\", (d) => y(d[yAxis]))\r\n-        .attr(\"r\", 3);\r\n-    },\r\n-    [handleAxis, height, drawSvg, copyData, xAxis, yAxis]\r\n-  );\r\n-\r\n-  useEffect(() => {\r\n-    if (svgRef.current) {\r\n-      createAreaGraph(svgRef.current);\r\n-    }\r\n-  }, [svgRef, createAreaGraph]);\r\n-\r\n-  return (\r\n-    <div className=\"wrapper\">\r\n-      <AreaChartPanel />\r\n-      <div className=\"area-chart-right\">\r\n-        <svg ref={svgRef} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AreaChart;\r\n-import React, { useRef, useEffect, useCallback, useState } from \"react\";\r\n-import * as d3 from \"d3\";\r\n-import AreaChartPanel from \"./AreaChartPanel\";\r\n-\r\n-\r\n-const AreaChart = ({\r\n-  data,\r\n-  width = 400,\r\n-  height = 400,\r\n-  margin = { left: 100, bottom: 100, top: 50, right: 50 },\r\n-  xAxis = \"date\",\r\n-  yAxis = \"value\"\r\n-  // tooltip={show: true, text: '<div>Portfolio Value: $%value%</div>'}\r\n-}) => {\r\n-  const svgRef = useRef(null);\r\n-  const [copyData, setCopyData] = useState([]);\r\n-\r\n-  useEffect(() => {\r\n-    const parseTime = d3.timeParse(\"%Y\");\r\n-    const newFormattedData = data.map((obj) => {\r\n-      return { date: parseTime(obj.data), value: obj.value };\r\n-    });\r\n-    setCopyData([...newFormattedData]);\r\n-  }, []);\r\n-\r\n-  const drawSvg = useCallback(\r\n-    (div) => {\r\n-      const svg = d3\r\n-        .select(div)\r\n-        .attr(\"width\", width + margin.left + margin.right)\r\n-        .attr(\"height\", height + margin.top + margin.bottom)\r\n-        .append(\"g\")\r\n-        .attr(\"transform\", `translate(${margin.left},${margin.right})`);\r\n-      return svg;\r\n-    },\r\n-    [height, width, margin]\r\n-  );\r\n-\r\n-  const handleAxis = useCallback(() => {\r\n-    let x, y;\r\n-    // const domainMax = (axis) => Math.max.apply(Math, data.map(function(o) { return o[axis]; }))\r\n-    // const scaleDomain = domain.length > 0 ? domain : createDomain(data, xAxis);\r\n-    const reformatDates = copyData.map((obj) => obj[xAxis]);\r\n-    x = d3\r\n-      .scaleTime()\r\n-      .domain(d3.extent(reformatDates))\r\n-      .range([0, width])\r\n-      .nice();\r\n-\r\n-    y = d3\r\n-      .scaleLinear()\r\n-      .domain([0, d3.max(copyData, (d) => +d[yAxis])])\r\n-      .range([height, 0]);\r\n-    return [x, y];\r\n-  }, [width, height, copyData, xAxis, yAxis]);\r\n-\r\n-  const createAreaGraph = useCallback(\r\n-    (div) => {\r\n-      const svg = drawSvg(div);\r\n-      const [x, y] = handleAxis();\r\n-\r\n-      svg\r\n-        .append(\"g\")\r\n-        .attr(\"transform\", `translate(0,${height})`)\r\n-        .call(d3.axisBottom(x).ticks(d3.timeYear));\r\n-      svg.append(\"g\").call(d3.axisLeft(y));\r\n-      // svg.append('line').classed('hoverLine', true)\r\n-      // svg.append('circle').classed('hoverPoint', true);\r\n-      svg.append(\"text\").classed(\"hoverText\", true);\r\n-\r\n-      // Add the area\r\n-      svg\r\n-        .append(\"path\")\r\n-        .datum(copyData)\r\n-        .attr(\"fill\", \"#cce5df\")\r\n-        .attr(\"stroke\", \"#69b3a2\")\r\n-        .attr(\"stroke-width\", 1.5)\r\n-        .attr(\r\n-          \"d\",\r\n-          d3\r\n-            .area()\r\n-            .x((d) => x(d[xAxis]))\r\n-            .y0(y(0))\r\n-            .y1((d) => y(d[yAxis]))\r\n-        );\r\n-\r\n-      svg\r\n-        .append(\"path\")\r\n-        .datum(copyData)\r\n-        .attr(\"fill\", \"none\")\r\n-        .attr(\"stroke\", \"#69b3a2\")\r\n-        .attr(\"stroke-width\", 2)\r\n-        .attr(\r\n-          \"d\",\r\n-          d3\r\n-            .line()\r\n-            .x((d) => x(d[xAxis]))\r\n-            .y((d) => y(d[yAxis]))\r\n-        );\r\n-\r\n-      svg\r\n-        .selectAll(\"myCircles\")\r\n-        .data(copyData)\r\n-        .join(\"circle\")\r\n-        .attr(\"fill\", \"yellow\")\r\n-        .attr(\"stroke\", \"none\")\r\n-        .attr(\"cx\", (d) => x(d[xAxis]))\r\n-        .attr(\"cy\", (d) => y(d[yAxis]))\r\n-        .attr(\"r\", 3);\r\n-    },\r\n-    [handleAxis, height, drawSvg, copyData, xAxis, yAxis]\r\n-  );\r\n-\r\n-  useEffect(() => {\r\n-    if (svgRef.current) {\r\n-      createAreaGraph(svgRef.current);\r\n-    }\r\n-  }, [svgRef, createAreaGraph]);\r\n-\r\n-  return (\r\n-    <div className=\"wrapper\">\r\n-      <AreaChartPanel />\r\n-      <div>\r\n-        <svg ref={svgRef} />\r\n-      </div>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default AreaChart;\r\n"
                },
                {
                    "date": 1692909185225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import React, { useRef, useEffect, useCallback, useState } from \"react\";\r\n import * as d3 from \"d3\";\r\n import AreaChartPanel from \"./AreaChartPanel\";\r\n+import './AreaChart.scss';\r\n \r\n \r\n const AreaChart = ({\r\n   data,\r\n"
                }
            ],
            "date": 1692908805164,
            "name": "Commit-0",
            "content": "import React, { useRef, useEffect, useCallback, useState } from \"react\";\r\nimport * as d3 from \"d3\";\r\n\r\n\r\nconst AreaChart = ({\r\n  data,\r\n  width = 400,\r\n  height = 400,\r\n  margin = { left: 100, bottom: 100, top: 50, right: 50 },\r\n  xAxis = \"date\",\r\n  yAxis = \"value\"\r\n  // tooltip={show: true, text: '<div>Portfolio Value: $%value%</div>'}\r\n}) => {\r\n  const svgRef = useRef(null);\r\n  const [copyData, setCopyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const parseTime = d3.timeParse(\"%Y\");\r\n    const newFormattedData = data.map((obj) => {\r\n      return { date: parseTime(obj.data), value: obj.value };\r\n    });\r\n    setCopyData([...newFormattedData]);\r\n  }, []);\r\n\r\n  const drawSvg = useCallback(\r\n    (div) => {\r\n      const svg = d3\r\n        .select(div)\r\n        .attr(\"width\", width + margin.left + margin.right)\r\n        .attr(\"height\", height + margin.top + margin.bottom)\r\n        .append(\"g\")\r\n        .attr(\"transform\", `translate(${margin.left},${margin.right})`);\r\n      return svg;\r\n    },\r\n    [height, width, margin]\r\n  );\r\n\r\n  const handleAxis = useCallback(() => {\r\n    let x, y;\r\n    // const domainMax = (axis) => Math.max.apply(Math, data.map(function(o) { return o[axis]; }))\r\n    // const scaleDomain = domain.length > 0 ? domain : createDomain(data, xAxis);\r\n    const reformatDates = copyData.map((obj) => obj[xAxis]);\r\n    x = d3\r\n      .scaleTime()\r\n      .domain(d3.extent(reformatDates))\r\n      .range([0, width])\r\n      .nice();\r\n\r\n    y = d3\r\n      .scaleLinear()\r\n      .domain([0, d3.max(copyData, (d) => +d[yAxis])])\r\n      .range([height, 0]);\r\n    return [x, y];\r\n  }, [width, height, copyData, xAxis, yAxis]);\r\n\r\n  const createAreaGraph = useCallback(\r\n    (div) => {\r\n      const svg = drawSvg(div);\r\n      const [x, y] = handleAxis();\r\n\r\n      svg\r\n        .append(\"g\")\r\n        .attr(\"transform\", `translate(0,${height})`)\r\n        .call(d3.axisBottom(x).ticks(d3.timeYear));\r\n      svg.append(\"g\").call(d3.axisLeft(y));\r\n      // svg.append('line').classed('hoverLine', true)\r\n      // svg.append('circle').classed('hoverPoint', true);\r\n      svg.append(\"text\").classed(\"hoverText\", true);\r\n\r\n      // Add the area\r\n      svg\r\n        .append(\"path\")\r\n        .datum(copyData)\r\n        .attr(\"fill\", \"#cce5df\")\r\n        .attr(\"stroke\", \"#69b3a2\")\r\n        .attr(\"stroke-width\", 1.5)\r\n        .attr(\r\n          \"d\",\r\n          d3\r\n            .area()\r\n            .x((d) => x(d[xAxis]))\r\n            .y0(y(0))\r\n            .y1((d) => y(d[yAxis]))\r\n        );\r\n\r\n      svg\r\n        .append(\"path\")\r\n        .datum(copyData)\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke\", \"#69b3a2\")\r\n        .attr(\"stroke-width\", 2)\r\n        .attr(\r\n          \"d\",\r\n          d3\r\n            .line()\r\n            .x((d) => x(d[xAxis]))\r\n            .y((d) => y(d[yAxis]))\r\n        );\r\n\r\n      svg\r\n        .selectAll(\"myCircles\")\r\n        .data(copyData)\r\n        .join(\"circle\")\r\n        .attr(\"fill\", \"yellow\")\r\n        .attr(\"stroke\", \"none\")\r\n        .attr(\"cx\", (d) => x(d[xAxis]))\r\n        .attr(\"cy\", (d) => y(d[yAxis]))\r\n        .attr(\"r\", 3);\r\n    },\r\n    [handleAxis, height, drawSvg, copyData, xAxis, yAxis]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      createAreaGraph(svgRef.current);\r\n    }\r\n  }, [svgRef, createAreaGraph]);\r\n\r\n  return (\r\n    <div>\r\n      <svg ref={svgRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AreaChart;\r\n"
        }
    ]
}