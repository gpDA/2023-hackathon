{
    "sourceFile": "src/components/HorizontalStackedBar/HorizontalStackedBar.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1692911056987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1692911143322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useEffect, useCallback, useRef } from 'react';\r\n-import { createColorPalette } from \"../utils/color\";\r\n+import { createColorPalette } from \"../../utils/color\";\r\n import * as d3 from 'd3';\r\n import HorizontalStackedBarPanel from \"./HorizontalStackedBarPanel\";\r\n import './HorizontalStackedBar.scss';\r\n \r\n"
                }
            ],
            "date": 1692911056987,
            "name": "Commit-0",
            "content": "import React, { useEffect, useCallback, useRef } from 'react';\r\nimport { createColorPalette } from \"../utils/color\";\r\nimport * as d3 from 'd3';\r\nimport HorizontalStackedBarPanel from \"./HorizontalStackedBarPanel\";\r\nimport './HorizontalStackedBar.scss';\r\n\r\n\r\nconst HorizontalStackedBar = ({\r\n  data,\r\n  label = { show: true, xLabel: \"Percentage %\", yLabel: \"Fruit Type\" },\r\n  width = 400,\r\n  height = 400,\r\n  margin = 80,\r\n  groupKey = \"label\",\r\n  subgroups = [\"value\", \"diff\"],\r\n  colorPalette = [],\r\n  colorType = \"Color-6\"\r\n}) => {\r\n  const svgRef = useRef(null);\r\n\r\n  const drawSvg = useCallback(\r\n    (div) => {\r\n      const svg = d3\r\n        .select(div)\r\n        .attr(\"width\", width + margin + 50)\r\n        .attr(\"height\", height + margin + 50)\r\n        .append(\"g\")\r\n        .attr(\"transform\", `translate(${margin + 30},${margin / 2})`);\r\n      return svg;\r\n    },\r\n    [height, width, margin]\r\n  );\r\n\r\n  const handleAxis = useCallback(\r\n    (groups) => {\r\n      const datanum = data.map((obj) =>\r\n        Object.keys(obj).reduce(\r\n          (acc, key) =>\r\n            subgroups.includes(key) ? acc + parseInt(obj[key]) : acc + 0,\r\n          0\r\n        )\r\n      );\r\n      const domainMax = Math.max(...datanum);\r\n\r\n      let y = d3.scaleBand().domain(groups).range([0, height]).padding([0.2]);\r\n      let x = d3\r\n        .scaleLinear()\r\n        .domain([0, Math.ceil(domainMax)])\r\n        .range([width, 0]);\r\n      return [x, y];\r\n    },\r\n    [width, height, subgroups]\r\n  );\r\n\r\n  const handleScale = useCallback(() => {\r\n    const len = subgroups.length;\r\n    const paletteRange =\r\n      colorPalette.length > 0\r\n        ? colorPalette\r\n        : createColorPalette(colorType, len);\r\n    const color = d3.scaleOrdinal().domain(subgroups).range(paletteRange);\r\n    return color;\r\n  }, [subgroups, colorPalette, colorType]);\r\n\r\n  const createPieGraph = useCallback(\r\n    (div) => {\r\n      const svg = drawSvg(div);\r\n      const groups = data.map((d) => d[groupKey]);\r\n      const stackedData = d3.stack().keys(subgroups)(data);\r\n      const [x, y] = handleAxis(groups);\r\n      const color = handleScale();\r\n\r\n      // y axis\r\n      svg\r\n        .append(\"g\")\r\n        .call(d3.axisLeft(y).tickSizeOuter(0));\r\n      // x axis\r\n      svg\r\n        .append(\"g\")\r\n        .attr(\"transform\", `translate(0, ${height})`)\r\n        .call(d3.axisBottom(x));\r\n\r\n      svg\r\n        .append(\"g\")\r\n        .selectAll(\"g\")\r\n        .data(stackedData)\r\n        .join(\"g\")\r\n        .attr(\"fill\", (d) => color(d.key))\r\n        .selectAll(\"rect\")\r\n        .data((d) => d)\r\n        .join(\"rect\")\r\n        .attr(\"y\", (d) => y(d.data[groupKey]))\r\n        .attr(\"x\", (d) => x(d[1]))\r\n        .attr(\"width\", (d) => x(d[0]) - x(d[1]))\r\n        .attr(\"height\", y.bandwidth());\r\n\r\n      label.show &&\r\n        svg\r\n          .append(\"text\")\r\n          .attr(\"class\", \"label\")\r\n          .attr(\"x\", -height / 2)\r\n          .attr(\"y\", -margin / 1.3)\r\n          .attr(\"transform\", \"rotate(-90)\")\r\n          .attr(\"text-anchor\", \"middle\")\r\n          .text(label.yLabel);\r\n\r\n      label.show &&\r\n        svg\r\n          .append(\"text\")\r\n          .attr(\"class\", \"label\")\r\n          .attr(\"x\", width / 2)\r\n          .attr(\"y\", height + (margin * 2) / 2.5)\r\n          .attr(\"text-anchor\", \"middle\")\r\n          .text(label.xLabel);\r\n    },\r\n    [\r\n      drawSvg,\r\n      handleAxis,\r\n      handleScale,\r\n      height,\r\n      subgroups,\r\n      groupKey,\r\n      label,\r\n      margin,\r\n      width\r\n    ]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (svgRef.current) {\r\n      createPieGraph(svgRef.current);\r\n    }\r\n  }, [svgRef, createPieGraph]);\r\n\r\n  return (\r\n    <div className=\"horizontal-stacked-bar-wrapper\">\r\n      <HorizontalStackedBarPanel />\r\n      <div className=\"horizontal-stacked-bar-right\">\r\n        <svg ref={svgRef} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HorizontalStackedBar"
        }
    ]
}