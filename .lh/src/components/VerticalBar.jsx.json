{
    "sourceFile": "src/components/VerticalBar.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1692823169648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1692824401190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,69 @@\n-import React from 'react'\r\n+import React from 'react';\r\n \r\n+import {\r\n+    axisBottom,\r\n+    axisLeft,\r\n+    ScaleBand,\r\n+    scaleBand,\r\n+    ScaleLinear,\r\n+    scaleLinear,\r\n+    select\r\n+  } from \"d3\";\r\n+\r\n+const AxisBottom = ({scale, transform}) => {\r\n+    const ref = useRef();\r\n+\r\n+    useEffect(() => {\r\n+        if (ref.current) {\r\n+          select(ref.current).call(axisBottom(scale));\r\n+        }\r\n+      }, [scale]);\r\n+    \r\n+    return <g ref={ref} transform={transform} />;\r\n+}\r\n+\r\n+const AxisLeft = ({scale, transform}) => {\r\n+    const ref = useRef();\r\n+\r\n+    useEffect(() => {\r\n+        if (ref.current) {\r\n+          select(ref.current).call(axisLeft(scale));\r\n+        }\r\n+      }, [scale]);\r\n+    \r\n+    return <g ref={ref} transform={transform} />;\r\n+}\r\n+\r\n+const Bars = ({data, height, scaleX, scaleY}) => {\r\n+    const margin = { top: 10, right: 0, bottom: 20, left: 30 };\r\n+    const width = 500 - margin.left - margin.right;\r\n+    const height = 300 - margin.top - margin.bottom;\r\n+  \r\n+    const scaleX = scaleBand()\r\n+      .domain(data.map(({ label }) => label))\r\n+      .range([0, width])\r\n+      .padding(0.5);\r\n+    const scaleY = scaleLinear()\r\n+      .domain([0, Math.max(...data.map(({ value }) => value))])\r\n+      .range([height, 0]);\r\n+\r\n+    return (\r\n+        <>\r\n+          {data.map(({ value, label }) => (\r\n+            <rect\r\n+              key={`bar-${label}`}\r\n+              x={scaleX(label)}\r\n+              y={scaleY(value)}\r\n+              width={scaleX.bandwidth()}\r\n+              height={height - scaleY(value)}\r\n+              fill=\"teal\"\r\n+            />\r\n+          ))}\r\n+        </>\r\n+      );\r\n+}\r\n+\r\n const VerticalBar = () => {\r\n   return (\r\n     <div>vertical-bar</div>\r\n   )\r\n"
                },
                {
                    "date": 1692824472082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,20 +34,8 @@\n     return <g ref={ref} transform={transform} />;\r\n }\r\n \r\n const Bars = ({data, height, scaleX, scaleY}) => {\r\n-    const margin = { top: 10, right: 0, bottom: 20, left: 30 };\r\n-    const width = 500 - margin.left - margin.right;\r\n-    const height = 300 - margin.top - margin.bottom;\r\n-  \r\n-    const scaleX = scaleBand()\r\n-      .domain(data.map(({ label }) => label))\r\n-      .range([0, width])\r\n-      .padding(0.5);\r\n-    const scaleY = scaleLinear()\r\n-      .domain([0, Math.max(...data.map(({ value }) => value))])\r\n-      .range([height, 0]);\r\n-\r\n     return (\r\n         <>\r\n           {data.map(({ value, label }) => (\r\n             <rect\r\n@@ -62,11 +50,32 @@\n         </>\r\n       );\r\n }\r\n \r\n-const VerticalBar = () => {\r\n-  return (\r\n-    <div>vertical-bar</div>\r\n-  )\r\n+const VerticalBar = ({ data }) => {\r\n+    const margin = { top: 10, right: 0, bottom: 20, left: 30 };\r\n+    const width = 500 - margin.left - margin.right;\r\n+    const height = 300 - margin.top - margin.bottom;\r\n+  \r\n+    const scaleX = scaleBand()\r\n+      .domain(data.map(({ label }) => label))\r\n+      .range([0, width])\r\n+      .padding(0.5);\r\n+    const scaleY = scaleLinear()\r\n+      .domain([0, Math.max(...data.map(({ value }) => value))])\r\n+      .range([height, 0]);\r\n+  \r\n+    return (\r\n+      <svg\r\n+        width={width + margin.left + margin.right}\r\n+        height={height + margin.top + margin.bottom}\r\n+      >\r\n+        <g transform={`translate(${margin.left}, ${margin.top})`}>\r\n+          <AxisBottom scale={scaleX} transform={`translate(0, ${height})`} />\r\n+          <AxisLeft scale={scaleY} />\r\n+          <Bars data={data} height={height} scaleX={scaleX} scaleY={scaleY} />\r\n+        </g>\r\n+      </svg>\r\n+    );\r\n }\r\n \r\n export default VerticalBar\n\\ No newline at end of file\n"
                },
                {
                    "date": 1692824625191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,81 @@\n+import React, { useRef } from 'react'\r\n+\r\n+import {\r\n+    axisBottom,\r\n+    axisLeft,\r\n+    ScaleBand,\r\n+    scaleBand,\r\n+    ScaleLinear,\r\n+    scaleLinear,\r\n+    select\r\n+  } from \"d3\";\r\n+\r\n+const AxisBottom = ({scale, transform}) => {\r\n+    const ref = useRef();\r\n+\r\n+    useEffect(() => {\r\n+        if (ref.current) {\r\n+          select(ref.current).call(axisBottom(scale));\r\n+        }\r\n+      }, [scale]);\r\n+    \r\n+    return <g ref={ref} transform={transform} />;\r\n+}\r\n+\r\n+const AxisLeft = ({scale, transform}) => {\r\n+    const ref = useRef();\r\n+\r\n+    useEffect(() => {\r\n+        if (ref.current) {\r\n+          select(ref.current).call(axisLeft(scale));\r\n+        }\r\n+      }, [scale]);\r\n+    \r\n+    return <g ref={ref} transform={transform} />;\r\n+}\r\n+\r\n+const Bars = ({data, height, scaleX, scaleY}) => {\r\n+    return (\r\n+        <>\r\n+          {data.map(({ value, label }) => (\r\n+            <rect\r\n+              key={`bar-${label}`}\r\n+              x={scaleX(label)}\r\n+              y={scaleY(value)}\r\n+              width={scaleX.bandwidth()}\r\n+              height={height - scaleY(value)}\r\n+              fill=\"teal\"\r\n+            />\r\n+          ))}\r\n+        </>\r\n+      );\r\n+}\r\n+\r\n+const VerticalBar = ({ data }) => {\r\n+    const margin = { top: 10, right: 0, bottom: 20, left: 30 };\r\n+    const width = 500 - margin.left - margin.right;\r\n+    const height = 300 - margin.top - margin.bottom;\r\n+  \r\n+    const scaleX = scaleBand()\r\n+      .domain(data.map(({ label }) => label))\r\n+      .range([0, width])\r\n+      .padding(0.5);\r\n+    const scaleY = scaleLinear()\r\n+      .domain([0, Math.max(...data.map(({ value }) => value))])\r\n+      .range([height, 0]);\r\n+  \r\n+    return (\r\n+      <svg\r\n+        width={width + margin.left + margin.right}\r\n+        height={height + margin.top + margin.bottom}\r\n+      >\r\n+        <g transform={`translate(${margin.left}, ${margin.top})`}>\r\n+          <AxisBottom scale={scaleX} transform={`translate(0, ${height})`} />\r\n+          <AxisLeft scale={scaleY} />\r\n+          <Bars data={data} height={height} scaleX={scaleX} scaleY={scaleY} />\r\n+        </g>\r\n+      </svg>\r\n+    );\r\n+}\r\n+\r\n+export default VerticalBar\n\\ No newline at end of file\n"
                },
                {
                    "date": 1692824644569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,81 @@\n+import React, { useRef } from 'react'\r\n+\r\n+import {\r\n+    axisBottom,\r\n+    axisLeft,\r\n+    ScaleBand,\r\n+    scaleBand,\r\n+    ScaleLinear,\r\n+    scaleLinear,\r\n+    select\r\n+  } from \"d3\";\r\n+\r\n+const AxisBottom = ({scale, transform}) => {\r\n+    const ref = useRef();\r\n+\r\n+    useEffect(() => {\r\n+        if (ref.current) {\r\n+          select(ref.current).call(axisBottom(scale));\r\n+        }\r\n+      }, [scale]);\r\n+    \r\n+    return <g ref={ref} transform={transform} />;\r\n+}\r\n+\r\n+const AxisLeft = ({scale, transform}) => {\r\n+    const ref = useRef();\r\n+\r\n+    useEffect(() => {\r\n+        if (ref.current) {\r\n+          select(ref.current).call(axisLeft(scale));\r\n+        }\r\n+      }, [scale]);\r\n+    \r\n+    return <g ref={ref} transform={transform} />;\r\n+}\r\n+\r\n+const Bars = ({data, height, scaleX, scaleY}) => {\r\n+    return (\r\n+        <>\r\n+          {data.map(({ value, label }) => (\r\n+            <rect\r\n+              key={`bar-${label}`}\r\n+              x={scaleX(label)}\r\n+              y={scaleY(value)}\r\n+              width={scaleX.bandwidth()}\r\n+              height={height - scaleY(value)}\r\n+              fill=\"teal\"\r\n+            />\r\n+          ))}\r\n+        </>\r\n+      );\r\n+}\r\n+\r\n+const VerticalBar = ({ data }) => {\r\n+    const margin = { top: 10, right: 0, bottom: 20, left: 30 };\r\n+    const width = 500 - margin.left - margin.right;\r\n+    const height = 300 - margin.top - margin.bottom;\r\n+  \r\n+    const scaleX = scaleBand()\r\n+      .domain(data.map(({ label }) => label))\r\n+      .range([0, width])\r\n+      .padding(0.5);\r\n+    const scaleY = scaleLinear()\r\n+      .domain([0, Math.max(...data.map(({ value }) => value))])\r\n+      .range([height, 0]);\r\n+  \r\n+    return (\r\n+      <svg\r\n+        width={width + margin.left + margin.right}\r\n+        height={height + margin.top + margin.bottom}\r\n+      >\r\n+        <g transform={`translate(${margin.left}, ${margin.top})`}>\r\n+          <AxisBottom scale={scaleX} transform={`translate(0, ${height})`} />\r\n+          <AxisLeft scale={scaleY} />\r\n+          <Bars data={data} height={height} scaleX={scaleX} scaleY={scaleY} />\r\n+        </g>\r\n+      </svg>\r\n+    );\r\n+}\r\n+\r\n+export default VerticalBar\n\\ No newline at end of file\n"
                },
                {
                    "date": 1692824682673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,81 @@\n+import React, { useEffect, useRef } from 'react'\r\n+\r\n+import {\r\n+    axisBottom,\r\n+    axisLeft,\r\n+    ScaleBand,\r\n+    scaleBand,\r\n+    ScaleLinear,\r\n+    scaleLinear,\r\n+    select\r\n+  } from \"d3\";\r\n+\r\n+const AxisBottom = ({scale, transform}) => {\r\n+    const ref = useRef();\r\n+\r\n+    useEffect(() => {\r\n+        if (ref.current) {\r\n+          select(ref.current).call(axisBottom(scale));\r\n+        }\r\n+      }, [scale]);\r\n+    \r\n+    return <g ref={ref} transform={transform} />;\r\n+}\r\n+\r\n+const AxisLeft = ({scale, transform}) => {\r\n+    const ref = useRef();\r\n+\r\n+    useEffect(() => {\r\n+        if (ref.current) {\r\n+          select(ref.current).call(axisLeft(scale));\r\n+        }\r\n+      }, [scale]);\r\n+    \r\n+    return <g ref={ref} transform={transform} />;\r\n+}\r\n+\r\n+const Bars = ({data, height, scaleX, scaleY}) => {\r\n+    return (\r\n+        <>\r\n+          {data.map(({ value, label }) => (\r\n+            <rect\r\n+              key={`bar-${label}`}\r\n+              x={scaleX(label)}\r\n+              y={scaleY(value)}\r\n+              width={scaleX.bandwidth()}\r\n+              height={height - scaleY(value)}\r\n+              fill=\"teal\"\r\n+            />\r\n+          ))}\r\n+        </>\r\n+      );\r\n+}\r\n+\r\n+const VerticalBar = ({ data }) => {\r\n+    const margin = { top: 10, right: 0, bottom: 20, left: 30 };\r\n+    const width = 500 - margin.left - margin.right;\r\n+    const height = 300 - margin.top - margin.bottom;\r\n+  \r\n+    const scaleX = scaleBand()\r\n+      .domain(data.map(({ label }) => label))\r\n+      .range([0, width])\r\n+      .padding(0.5);\r\n+    const scaleY = scaleLinear()\r\n+      .domain([0, Math.max(...data.map(({ value }) => value))])\r\n+      .range([height, 0]);\r\n+  \r\n+    return (\r\n+      <svg\r\n+        width={width + margin.left + margin.right}\r\n+        height={height + margin.top + margin.bottom}\r\n+      >\r\n+        <g transform={`translate(${margin.left}, ${margin.top})`}>\r\n+          <AxisBottom scale={scaleX} transform={`translate(0, ${height})`} />\r\n+          <AxisLeft scale={scaleY} />\r\n+          <Bars data={data} height={height} scaleX={scaleX} scaleY={scaleY} />\r\n+        </g>\r\n+      </svg>\r\n+    );\r\n+}\r\n+\r\n+export default VerticalBar\n\\ No newline at end of file\n"
                },
                {
                    "date": 1692824796983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,81 @@\n+import React, { useEffect, useRef } from 'react'\r\n+\r\n+import {\r\n+    axisBottom,\r\n+    axisLeft,\r\n+    ScaleBand,\r\n+    scaleBand,\r\n+    ScaleLinear,\r\n+    scaleLinear,\r\n+    select\r\n+  } from \"d3\";\r\n+\r\n+const AxisBottom = ({scale, transform}) => {\r\n+    const ref = useRef();\r\n+\r\n+    useEffect(() => {\r\n+        if (ref.current) {\r\n+          select(ref.current).call(axisBottom(scale));\r\n+        }\r\n+      }, [scale]);\r\n+    \r\n+    return <g ref={ref} transform={transform} />;\r\n+}\r\n+\r\n+const AxisLeft = ({scale, transform}) => {\r\n+    const ref = useRef();\r\n+\r\n+    useEffect(() => {\r\n+        if (ref.current) {\r\n+          select(ref.current).call(axisLeft(scale));\r\n+        }\r\n+      }, [scale]);\r\n+    \r\n+    return <g ref={ref} transform={transform} />;\r\n+}\r\n+\r\n+const Bars = ({data, height, scaleX, scaleY}) => {\r\n+    return (\r\n+        <>\r\n+          {data.map(({ value, label }) => (\r\n+            <rect\r\n+              key={`bar-${label}`}\r\n+              x={scaleX(label)}\r\n+              y={scaleY(value)}\r\n+              width={scaleX.bandwidth()}\r\n+              height={height - scaleY(value)}\r\n+              fill=\"teal\"\r\n+            />\r\n+          ))}\r\n+        </>\r\n+      );\r\n+}\r\n+\r\n+const VerticalBar = ({ data }) => {\r\n+    const margin = { top: 10, right: 0, bottom: 20, left: 30 };\r\n+    const width = 500 - margin.left - margin.right;\r\n+    const height = 300 - margin.top - margin.bottom;\r\n+  \r\n+    const scaleX = scaleBand()\r\n+      .domain(data.map(({ label }) => label))\r\n+      .range([0, width])\r\n+      .padding(0.5);\r\n+    const scaleY = scaleLinear()\r\n+      .domain([0, Math.max(...data.map(({ value }) => value))])\r\n+      .range([height, 0]);\r\n+  \r\n+    return (\r\n+      <svg\r\n+        width={width + margin.left + margin.right}\r\n+        height={height + margin.top + margin.bottom}\r\n+      >\r\n+        <g transform={`translate(${margin.left}, ${margin.top})`}>\r\n+          <AxisBottom scale={scaleX} transform={`translate(0, ${height})`} />\r\n+          <AxisLeft scale={scaleY} />\r\n+          <Bars data={data} height={height} scaleX={scaleX} scaleY={scaleY} />\r\n+        </g>\r\n+      </svg>\r\n+    );\r\n+}\r\n+\r\n+export default VerticalBar\n\\ No newline at end of file\n"
                }
            ],
            "date": 1692823169648,
            "name": "Commit-0",
            "content": "import React from 'react'\r\n\r\nconst VerticalBar = () => {\r\n  return (\r\n    <div>vertical-bar</div>\r\n  )\r\n}\r\n\r\nexport default VerticalBar"
        }
    ]
}